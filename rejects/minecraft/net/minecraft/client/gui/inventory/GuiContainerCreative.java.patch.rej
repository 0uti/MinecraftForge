++++ REJECTED PATCH 2
                         return;
                     }
 
-                    if (itemstack1 != null && itemstack2 != null && itemstack1.isItemEqual(itemstack2))
+                    if (itemstack1 != null && itemstack2 != null && itemstack1.isItemEqual(itemstack2) && ItemStack.areItemStackTagsEqual(itemstack1, itemstack2)) //Forge: Bugfix, Compare NBT data, allow for deletion of enchanted books, MC-12770
                     {
                         if (clickedButton == 0)
                         {
++++ END PATCH
++++ REJECTED PATCH 5
     {
         GuiContainerCreative.ContainerCreative containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
         containercreative.itemList.clear();
+
+        CreativeTabs tab = CreativeTabs.creativeTabArray[selectedTabIndex];
+        if (tab.hasSearchBar() && tab != CreativeTabs.tabAllSearch)
+        {
+            tab.displayAllReleventItems(containercreative.itemList);
+            updateFilteredItems(containercreative);
+            return;
+        }
+
         Iterator iterator = Item.itemRegistry.iterator();
 
         while (iterator.hasNext())
++++ END PATCH
++++ REJECTED PATCH 6
                 item.getSubItems(item, (CreativeTabs)null, containercreative.itemList);
             }
         }
+        updateFilteredItems(containercreative);
+    }
 
+    //split from above for custom search tabs
+    private void updateFilteredItems(GuiContainerCreative.ContainerCreative containercreative)
+    {
+        Iterator iterator;
         Enchantment[] aenchantment = Enchantment.enchantmentsBookList;
         int j = aenchantment.length;
 
+        if (CreativeTabs.creativeTabArray[selectedTabIndex] != CreativeTabs.tabAllSearch) j = 0; //Forge: Don't add enchants to custom tabs.
         for (int i = 0; i < j; ++i)
         {
             Enchantment enchantment = aenchantment[i];
++++ END PATCH
++++ REJECTED PATCH 8
             {
                 CreativeTabs creativetabs = acreativetabs[k1];
 
-                if (this.func_147049_a(creativetabs, l, i1))
+                if (creativetabs != null && this.func_147049_a(creativetabs, l, i1))
                 {
                     this.setCurrentCreativeTab(creativetabs);
                     return;
++++ END PATCH
++++ REJECTED PATCH 11
 
         super.drawScreen(mouseX, mouseY, partialTicks);
         CreativeTabs[] acreativetabs = CreativeTabs.creativeTabArray;
-        int i2 = acreativetabs.length;
+        int start = tabPage * 10;
+        int i2 = Math.min(acreativetabs.length, ((tabPage + 1) * 10) + 2);
+        if (tabPage != 0) start += 2;
+        boolean rendered = false;
 
-        for (int j2 = 0; j2 < i2; ++j2)
+        for (int j2 = start; j2 < i2; ++j2)
         {
             CreativeTabs creativetabs = acreativetabs[j2];
 
+            if (creativetabs == null) continue;
             if (this.renderCreativeInventoryHoveringText(creativetabs, mouseX, mouseY))
             {
+                rendered = true;
                 break;
             }
         }
 
+        if (!rendered && renderCreativeInventoryHoveringText(CreativeTabs.tabAllSearch, mouseX, mouseY))
+        {
+            renderCreativeInventoryHoveringText(CreativeTabs.tabInventory, mouseX, mouseY);
+        }
+
         if (this.field_147064_C != null && selectedTabIndex == CreativeTabs.tabInventory.getTabIndex() && this.isPointInRegion(this.field_147064_C.xDisplayPosition, this.field_147064_C.yDisplayPosition, 16, 16, mouseX, mouseY))
         {
             this.drawCreativeTabHoveringText(I18n.format("inventory.binSlot", new Object[0]), mouseX, mouseY);
         }
 
+        if (maxPages != 0)
+        {
+            String page = String.format("%d / %d", tabPage + 1, maxPages + 1);
+            int width = fontRendererObj.getStringWidth(page);
+            GlStateManager.disableLighting();
+            this.zLevel = 300.0F;
+            itemRender.zLevel = 300.0F;
+            fontRendererObj.drawString(page, guiLeft + (xSize / 2) - (width / 2), guiTop - 44, -1);
+            this.zLevel = 0.0F;
+            itemRender.zLevel = 0.0F;
+        }
+
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableLighting();
     }
++++ END PATCH
++++ REJECTED PATCH 12
         int k = acreativetabs.length;
         int l;
 
-        for (l = 0; l < k; ++l)
+        int start = tabPage * 10;
+        k = Math.min(acreativetabs.length, ((tabPage + 1) * 10 + 2));
+        if (tabPage != 0) start += 2;
+
+        for (l = start; l < k; ++l)
         {
             CreativeTabs creativetabs1 = acreativetabs[l];
             this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
 
+            if (creativetabs1 == null) continue;
             if (creativetabs1.getTabIndex() != selectedTabIndex)
             {
                 this.func_147051_a(creativetabs1);
             }
         }
 
+        if (tabPage != 0)
+        {
+            if (creativetabs != CreativeTabs.tabAllSearch)
+            {
+                this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
+                func_147051_a(CreativeTabs.tabAllSearch);
+            }
+            if (creativetabs != CreativeTabs.tabInventory)
+            {
+                this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
+                func_147051_a(CreativeTabs.tabInventory);
+            }
+        }
+
         this.mc.getTextureManager().bindTexture(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativetabs.getBackgroundImageName()));
         this.drawTexturedModalRect(this.guiLeft, this.guiTop, 0, 0, this.xSize, this.ySize);
         this.searchField.drawTextBox();
++++ END PATCH
++++ REJECTED PATCH 14
 
     protected boolean func_147049_a(CreativeTabs p_147049_1_, int p_147049_2_, int p_147049_3_)
     {
+        if (p_147049_1_.getTabPage() != tabPage)
+        {
+            if (p_147049_1_ != CreativeTabs.tabAllSearch &&
+                p_147049_1_ != CreativeTabs.tabInventory)
+            {
+                return false;
+            }
+        }
+
         int k = p_147049_1_.getTabColumn();
         int l = 28 * k;
         byte b0 = 0;
++++ END PATCH
++++ REJECTED PATCH 15
         }
 
         GlStateManager.disableLighting();
+        GlStateManager.color(1F, 1F, 1F); //Forge: Reset color in case Items change it.
+        GlStateManager.enableBlend(); //Forge: Make sure blend is enabled else tabs show a white border.
         this.drawTexturedModalRect(l, i1, j, k, 28, b0);
         this.zLevel = 100.0F;
         this.itemRender.zLevel = 100.0F;
++++ END PATCH
