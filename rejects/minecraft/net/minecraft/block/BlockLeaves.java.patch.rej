++++ REJECTED PATCH 2
                         BlockPos blockpos1 = pos.add(i1, j1, k1);
                         IBlockState iblockstate1 = worldIn.getBlockState(blockpos1);
 
-                        if (iblockstate1.getBlock().getMaterial() == Material.leaves && !((Boolean)iblockstate1.getValue(CHECK_DECAY)).booleanValue())
+                        if (iblockstate1.getBlock().isLeaves(worldIn, blockpos1))
                         {
-                            worldIn.setBlockState(blockpos1, iblockstate1.withProperty(CHECK_DECAY, Boolean.valueOf(true)), 4);
+                            iblockstate1.getBlock().beginLeavesDecay(worldIn, blockpos1);
                         }
                     }
                 }
++++ END PATCH
++++ REJECTED PATCH 3
                         {
                             for (i2 = -b0; i2 <= b0; ++i2)
                             {
-                                Block block = worldIn.getBlockState(new BlockPos(j + k1, k + l1, l + i2)).getBlock();
+                                BlockPos tmp = new BlockPos(j + k1, k + l1, l + i2);
+                                Block block = worldIn.getBlockState(tmp).getBlock();
 
-                                if (block != Blocks.log && block != Blocks.log2)
+                                if (!block.canSustainLeaves(worldIn, tmp))
                                 {
-                                    if (block.getMaterial() == Material.leaves)
+                                    if (block.isLeaves(worldIn, tmp))
                                     {
                                         this.surroundings[(k1 + j1) * i1 + (l1 + j1) * b1 + i2 + j1] = -2;
                                     }
++++ END PATCH
++++ REJECTED PATCH 4
 
     public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
     {
-        if (!worldIn.isRemote)
-        {
-            int j = this.getSaplingDropChance(state);
-
-            if (fortune > 0)
-            {
-                j -= 2 << fortune;
-
-                if (j < 10)
-                {
-                    j = 10;
-                }
-            }
-
-            if (worldIn.rand.nextInt(j) == 0)
-            {
-                Item item = this.getItemDropped(state, worldIn.rand, fortune);
-                spawnAsEntity(worldIn, pos, new ItemStack(item, 1, this.damageDropped(state)));
-            }
-
-            j = 200;
-
-            if (fortune > 0)
-            {
-                j -= 10 << fortune;
-
-                if (j < 40)
-                {
-                    j = 40;
-                }
-            }
-
-            this.dropApple(worldIn, pos, state, j);
-        }
+        super.dropBlockAsItemWithChance(worldIn, pos, state, chance, fortune);
     }
 
     protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance) {}
++++ END PATCH
