++++ REJECTED PATCH 2
     }
 
     public abstract IProperty getShapeProperty();
+    /* ======================================== FORGE START =====================================*/
+    /**
+     * Return true if the rail can make corners.
+     * Used by placement logic.
+     * @param world The world.
+     * @param pod Block's position in world
+     * @return True if the rail can make corners.
+     */
+    public boolean isFlexibleRail(IBlockAccess world, BlockPos pos)
+    {
+        return !this.isPowered;
+    }
 
+    /**
+     * Returns true if the rail can make up and down slopes.
+     * Used by placement logic.
+     * @param world The world.
+     * @param pod Block's position in world
+     * @return True if the rail can make slopes.
+     */
+    public boolean canMakeSlopes(IBlockAccess world, BlockPos pos)
+    {
+        return true;
+    }
+
+    /**
+     * Returns the max speed of the rail at the specified position.
+     * @param world The world.
+     * @param cart The cart on the rail, may be null.
+     * @param pod Block's position in world
+     * @return The max speed of the current rail.
+     */
+    public float getRailMaxSpeed(World world, net.minecraft.entity.item.EntityMinecart cart, BlockPos pos)
+    {
+        return 0.4f;
+    }
+
+    /**
+     * This function is called by any minecart that passes over this rail.
+     * It is called once per update tick that the minecart is on the rail.
+     * @param world The world.
+     * @param cart The cart on the rail.
+     * @param pod Block's position in world
+     */
+    public void onMinecartPass(World world, net.minecraft.entity.item.EntityMinecart cart, BlockPos pos)
+    {
+    }
+
+    /**
+     * Rotate the block. For vanilla blocks this rotates around the axis passed in (generally, it should be the "face" that was hit).
+     * Note: for mod blocks, this is up to the block and modder to decide. It is not mandated that it be a rotation around the
+     * face, but could be a rotation to orient *to* that face, or a visiting of possible rotations.
+     * The method should return true if the rotation was successful though.
+     *
+     * @param world The world
+     * @param pos Block position in world
+     * @param axis The axis to rotate around
+     * @return True if the rotation was successful, False if the rotation failed, or is not possible
+     */
+    public boolean rotateBlock(World world, BlockPos pos, EnumFacing axis)
+    {
+        IBlockState state = world.getBlockState(pos);
+        for (IProperty prop : (java.util.Set<IProperty>)state.getProperties().keySet())
+        {
+            if (prop.getName().equals("shape"))
+            {
+                world.setBlockState(pos, state.cycleProperty(prop));
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /* ======================================== FORGE END =====================================*/
+
     public static enum EnumRailDirection implements IStringSerializable
     {
         NORTH_SOUTH(0, "north_south"),
++++ END PATCH
++++ REJECTED PATCH 4
             this.state = state;
             this.block = (BlockRailBase)state.getBlock();
             BlockRailBase.EnumRailDirection enumraildirection = (BlockRailBase.EnumRailDirection)state.getValue(BlockRailBase.this.getShapeProperty());
-            this.isPowered = this.block.isPowered;
+            this.isPowered = !this.block.isFlexibleRail(worldIn, pos);
+            canMakeSlopes = this.block.canMakeSlopes(worldIn, pos);
             this.func_180360_a(enumraildirection);
         }
 
++++ END PATCH
++++ REJECTED PATCH 5
                 }
             }
 
-            if (enumraildirection == BlockRailBase.EnumRailDirection.NORTH_SOUTH)
+            if (enumraildirection == BlockRailBase.EnumRailDirection.NORTH_SOUTH && canMakeSlopes)
             {
                 if (BlockRailBase.isRailBlock(this.world, blockpos.up()))
                 {
++++ END PATCH
++++ REJECTED PATCH 6
                 }
             }
 
-            if (enumraildirection == BlockRailBase.EnumRailDirection.EAST_WEST)
+            if (enumraildirection == BlockRailBase.EnumRailDirection.EAST_WEST && canMakeSlopes)
             {
                 if (BlockRailBase.isRailBlock(this.world, blockpos3.up()))
                 {
++++ END PATCH
++++ REJECTED PATCH 7
                 }
             }
 
-            if (enumraildirection == BlockRailBase.EnumRailDirection.NORTH_SOUTH)
+            if (enumraildirection == BlockRailBase.EnumRailDirection.NORTH_SOUTH && canMakeSlopes)
             {
                 if (BlockRailBase.isRailBlock(this.world, blockpos.up()))
                 {
++++ END PATCH
++++ REJECTED PATCH 8
                 }
             }
 
-            if (enumraildirection == BlockRailBase.EnumRailDirection.EAST_WEST)
+            if (enumraildirection == BlockRailBase.EnumRailDirection.EAST_WEST && canMakeSlopes)
             {
                 if (BlockRailBase.isRailBlock(this.world, blockpos3.up()))
                 {
++++ END PATCH
