++++ REJECTED PATCH 1
 public class Block
 {
     private static final ResourceLocation AIR_ID = new ResourceLocation("air");
-    public static final RegistryNamespacedDefaultedByKey blockRegistry = new RegistryNamespacedDefaultedByKey(AIR_ID);
-    public static final ObjectIntIdentityMap BLOCK_STATE_IDS = new ObjectIntIdentityMap();
+    public static final RegistryNamespacedDefaultedByKey blockRegistry = net.minecraftforge.fml.common.registry.GameData.getBlockRegistry();
+    @Deprecated //Modders: DO NOT use this! Use GameRegistry
+    public static final ObjectIntIdentityMap BLOCK_STATE_IDS = net.minecraftforge.fml.common.registry.GameData.getBlockStateIDMap();
     private CreativeTabs displayOnCreativeTab;
     public static final Block.SoundType soundTypeStone = new Block.SoundType("stone", 1.0F, 1.0F);
     public static final Block.SoundType soundTypeWood = new Block.SoundType("wood", 1.0F, 1.0F);
++++ END PATCH
++++ REJECTED PATCH 7
 
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {}
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {}
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
+    {
+        if (hasTileEntity(state) && !(this instanceof BlockContainer))
+        {
+            worldIn.removeTileEntity(pos);
+        }
+    }
 
     public int quantityDropped(Random random)
     {
++++ END PATCH
++++ REJECTED PATCH 9
 
     public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
     {
-        if (!worldIn.isRemote)
+        if (!worldIn.isRemote && !worldIn.restoringBlockSnapshots) // do not drop items while restoring blockstates, prevents item dupe
         {
-            int j = this.quantityDroppedWithBonus(fortune, worldIn.rand);
+            java.util.List<ItemStack> items = getDrops(worldIn, pos, state, fortune);
+            chance = net.minecraftforge.event.ForgeEventFactory.fireBlockHarvesting(items, worldIn, pos, state, fortune, chance, false, harvesters.get());
 
-            for (int k = 0; k < j; ++k)
+            for (ItemStack item : items)
             {
                 if (worldIn.rand.nextFloat() <= chance)
                 {
-                    Item item = this.getItemDropped(state, worldIn.rand, fortune);
-
-                    if (item != null)
-                    {
-                        spawnAsEntity(worldIn, pos, new ItemStack(item, 1, this.damageDropped(state)));
-                    }
+                    spawnAsEntity(worldIn, pos, item);
                 }
             }
         }
++++ END PATCH
