--- ../src_base/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
@@ -6,6 +6,10 @@
 
 import java.util.*;
 
+import net.minecraft.src.forge.ArmorProperties;
+import net.minecraft.src.forge.ISpecialArmor;
+import net.minecraft.src.forge.ForgeHooks;
+
 // Referenced classes of package net.minecraft.src:
 //            EntityLiving, InventoryPlayer, FoodStats, PlayerCapabilities, 
 //            ContainerPlayer, World, ChunkCoordinates, DataWatcher, 
@@ -433,6 +437,8 @@
         worldObj.entityJoinedWorld(entityitem);
     }
 
+    /* FORGE: This isnt called anymore
+     */
     public float getCurrentPlayerStrVsBlock(Block block)
     {
         float f = inventory.getStrVsBlock(block);
@@ -455,6 +461,32 @@
         return f;
     }
 
+    /* FORGE: Extended to allow metadata.
+     */
+    public float getCurrentPlayerStrVsBlock(Block block, int md)
+    {
+        float f = 1.0F;
+	ItemStack ist=inventory.getCurrentItem();
+	if(ist!=null) f=ist.getItem().getStrVsBlock(ist,block,md);
+        if(isInsideOfMaterial(Material.water))
+        {
+            f /= 5F;
+        }
+        if(!onGround)
+        {
+            f /= 5F;
+        }
+        if(func_35184_a(Potion.digSpeed))
+        {
+            f *= 1.0F + (float)(func_35187_b(Potion.digSpeed).func_35652_c() + 1) * 0.2F;
+        }
+        if(func_35184_a(Potion.digSlowdown))
+        {
+            f *= 1.0F - (float)(func_35187_b(Potion.digSlowdown).func_35652_c() + 1) * 0.2F;
+        }
+        return f;
+    }
+
     public boolean canHarvestBlock(Block block)
     {
         return inventory.canHarvestBlock(block);
@@ -615,6 +647,25 @@
 
     protected void damageEntity(DamageSource damagesource, int i)
     {
+    	boolean doRegularComputation = true;
+        int initialDamage = i;
+        
+        for (ItemStack stack : inventory.armorInventory) {
+            if (stack != null && stack.getItem() instanceof ISpecialArmor) {
+                ISpecialArmor armor = (ISpecialArmor) stack.getItem();
+                
+                ArmorProperties props = armor.getProperties(this, initialDamage, i);                            
+                i = i - props.damageRemove;
+                doRegularComputation = doRegularComputation
+                        && props.allowRegularComputation;
+            }
+        }
+        
+        if (!doRegularComputation) {
+            super.damageEntity(damagesource, i);
+            return;
+        }
+        
         if(!damagesource.func_35083_b() && func_35180_G())
         {
             i = 1 + i >> 1;
@@ -668,7 +719,9 @@
 
     public void destroyCurrentEquippedItem()
     {
+	ItemStack orig=inventory.getCurrentItem();
         inventory.setInventorySlotContents(inventory.currentItem, null);
+	ForgeHooks.onDestroyCurrentItem(this,orig);
     }
 
     public double getYOffset()
@@ -757,6 +810,10 @@
 
     public EnumStatus sleepInBedAt(int i, int j, int k)
     {
+	EnumStatus customSleep = ForgeHooks.sleepInBedAt(this, i, j, k);
+	if (customSleep != null) {
+	    return customSleep;
+	}
         if(!worldObj.singleplayerWorld)
         {
             if(isPlayerSleeping() || !isEntityAlive())
