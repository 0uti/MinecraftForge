--- ../src_base/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
@@ -6,6 +6,10 @@
 
 import java.util.*;
 
+import net.minecraft.src.forge.ArmorProperties;
+import net.minecraft.src.forge.ISpecialArmor;
+import net.minecraft.src.forge.ForgeHooks;
+
 // Referenced classes of package net.minecraft.src:
 //            EntityLiving, InventoryPlayer, FoodStats, PlayerCapabilities, 
 //            ContainerPlayer, World, ChunkCoordinates, DataWatcher, 
@@ -447,7 +451,16 @@
 
     public void dropCurrentItem()
     {
-        dropPlayerItemWithRandomChoice(inventory.decrStackSize(inventory.currentItem, 1), false);
+    	ItemStack stack = inventory.getCurrentItem();
+    	if (stack == null)
+    	{
+    		return;
+    	}    	
+    	
+    	if (stack.getItem().onDroppedByPlayer(stack, this))
+    	{
+            dropPlayerItemWithRandomChoice(inventory.decrStackSize(inventory.currentItem, 1), false);
+    	}
     }
 
     public void dropPlayerItem(ItemStack itemstack)
@@ -493,6 +506,8 @@
         worldObj.entityJoinedWorld(entityitem);
     }
 
+    /* FORGE: This isnt called anymore
+     */
     public float getCurrentPlayerStrVsBlock(Block block)
     {
         float f = inventory.getStrVsBlock(block);
@@ -521,6 +536,45 @@
         return f1;
     }
 
+    /* FORGE: Extended to allow metadata.
+     */
+    public float getCurrentPlayerStrVsBlock(Block block, int md)
+    {
+        float f = 1.0F;
+        ItemStack ist = inventory.getCurrentItem();
+        if(ist != null)
+        {
+        	f = ist.getItem().getStrVsBlock(ist, block, md);
+        }
+        
+        int i = EnchantmentHelper.getEfficiencyModifier(inventory);
+        if (i > 0 && ForgeHooks.canHarvestBlock(block, this, md))
+        {
+        	f += i * i + 1;
+        }
+        
+        if(isPotionActive(Potion.digSpeed))
+        {
+            f *= 1.0F + (float)(getActivePotionEffect(Potion.digSpeed).getAmplifier() + 1) * 0.2F;
+        }
+        
+        if(isPotionActive(Potion.digSlowdown))
+        {
+            f *= 1.0F - (float)(getActivePotionEffect(Potion.digSlowdown).getAmplifier() + 1) * 0.2F;
+        }
+        
+        if(isInsideOfMaterial(Material.water) && !EnchantmentHelper.getAquaAffinityModifier(inventory))
+        {
+            f /= 5F;
+        }
+        
+        if(!onGround)
+        {
+            f /= 5F;
+        }
+        return f;
+    }
+
     public boolean canHarvestBlock(Block block)
     {
         return inventory.canHarvestBlock(block);
@@ -718,7 +772,26 @@
     }
 
     protected void damageEntity(DamageSource damagesource, int i)
-    {
+    {        
+        boolean doRegularComputation = true;
+        int initialDamage = i;
+    
+        for (ItemStack stack : inventory.armorInventory) {
+            if (stack != null && stack.getItem() instanceof ISpecialArmor) {
+                ISpecialArmor armor = (ISpecialArmor) stack.getItem();
+            
+                ArmorProperties props = armor.getProperties(this, initialDamage, i);                            
+                i = i - props.damageRemove;
+                doRegularComputation = doRegularComputation
+                    && props.allowRegularComputation;
+            }
+        }
+    
+        if (!doRegularComputation) {
+            super.damageEntity(damagesource, i);
+            return;
+        }
+        
         if(!damagesource.isUnblockable() && func_35180_G())
         {
             i = 1 + i >> 1;
@@ -770,7 +843,9 @@
 
     public void destroyCurrentEquippedItem()
     {
+	ItemStack orig=inventory.getCurrentItem();
         inventory.setInventorySlotContents(inventory.currentItem, null);
+	ForgeHooks.onDestroyCurrentItem(this,orig);
     }
 
     public double getYOffset()
@@ -896,6 +971,10 @@
 
     public EnumStatus sleepInBedAt(int i, int j, int k)
     {
+	EnumStatus customSleep = ForgeHooks.sleepInBedAt(this, i, j, k);
+	if (customSleep != null) {
+	    return customSleep;
+	}
         if(!worldObj.singleplayerWorld)
         {
             if(isPlayerSleeping() || !isEntityAlive())
