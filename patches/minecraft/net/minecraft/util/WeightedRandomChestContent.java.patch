--- ../src-base/minecraft/net/minecraft/util/WeightedRandomChestContent.java
+++ ../src-work/minecraft/net/minecraft/util/WeightedRandomChestContent.java
@@ -37,48 +37,39 @@
         for (int i = 0; i < p_177630_3_; ++i)
         {
             WeightedRandomChestContent weightedrandomchestcontent = (WeightedRandomChestContent)WeightedRandom.getRandomItem(random, p_177630_1_);
-            int j = weightedrandomchestcontent.theMinimumChanceToGenerateItem + random.nextInt(weightedrandomchestcontent.theMaximumChanceToGenerateItem - weightedrandomchestcontent.theMinimumChanceToGenerateItem + 1);
+            ItemStack[] stacks = weightedrandomchestcontent.generateChestContent(random, p_177630_2_);
 
-            if (weightedrandomchestcontent.theItemId.getMaxStackSize() >= j)
+            for (ItemStack itemstack1 : stacks)
             {
-                ItemStack itemstack1 = weightedrandomchestcontent.theItemId.copy();
-                itemstack1.stackSize = j;
                 p_177630_2_.setInventorySlotContents(random.nextInt(p_177630_2_.getSizeInventory()), itemstack1);
             }
-            else
-            {
-                for (int k = 0; k < j; ++k)
-                {
-                    ItemStack itemstack = weightedrandomchestcontent.theItemId.copy();
-                    itemstack.stackSize = 1;
-                    p_177630_2_.setInventorySlotContents(random.nextInt(p_177630_2_.getSizeInventory()), itemstack);
-                }
-            }
         }
     }
 
+    // -- Forge hooks
+    /**
+     * Allow a mod to submit a custom implementation that can delegate item stack generation beyond simple stack lookup
+     *
+     * @param random The current random for generation
+     * @param newInventory The inventory being generated (do not populate it, but you can refer to it)
+     * @return An array of {@link ItemStack} to put into the chest
+     */
+    protected ItemStack[] generateChestContent(Random random, IInventory newInventory)
+    {
+        return net.minecraftforge.common.ChestGenHooks.generateStacks(random, theItemId, theMinimumChanceToGenerateItem, theMaximumChanceToGenerateItem);
+    }
+
     public static void generateDispenserContents(Random random, List<WeightedRandomChestContent> p_177631_1_, TileEntityDispenser dispenser, int p_177631_3_)
     {
         for (int i = 0; i < p_177631_3_; ++i)
         {
             WeightedRandomChestContent weightedrandomchestcontent = (WeightedRandomChestContent)WeightedRandom.getRandomItem(random, p_177631_1_);
-            int j = weightedrandomchestcontent.theMinimumChanceToGenerateItem + random.nextInt(weightedrandomchestcontent.theMaximumChanceToGenerateItem - weightedrandomchestcontent.theMinimumChanceToGenerateItem + 1);
+            ItemStack[] stacks = weightedrandomchestcontent.generateChestContent(random, dispenser);
 
-            if (weightedrandomchestcontent.theItemId.getMaxStackSize() >= j)
+            for (ItemStack itemstack1 : stacks)
             {
-                ItemStack itemstack1 = weightedrandomchestcontent.theItemId.copy();
-                itemstack1.stackSize = j;
                 dispenser.setInventorySlotContents(random.nextInt(dispenser.getSizeInventory()), itemstack1);
             }
-            else
-            {
-                for (int k = 0; k < j; ++k)
-                {
-                    ItemStack itemstack = weightedrandomchestcontent.theItemId.copy();
-                    itemstack.stackSize = 1;
-                    dispenser.setInventorySlotContents(random.nextInt(dispenser.getSizeInventory()), itemstack);
-                }
-            }
         }
     }
 
