--- ../src-base/minecraft/net/minecraft/block/state/BlockState.java
+++ ../src-work/minecraft/net/minecraft/block/state/BlockState.java
@@ -40,6 +40,16 @@
 
     public BlockState(Block blockIn, IProperty... properties)
     {
+        this(blockIn, properties, null);
+    }
+
+    protected StateImplementation createState(Block block, ImmutableMap<IProperty, Comparable> properties, ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, com.google.common.base.Optional<?>> unlistedProperties)
+    {
+        return new StateImplementation(block, properties);
+    }
+
+    protected BlockState(Block blockIn, IProperty[] properties, ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, com.google.common.base.Optional<?>> unlistedProperties)
+    {
         this.block = blockIn;
         Arrays.sort(properties, new Comparator<IProperty>()
         {
@@ -56,7 +66,7 @@
         for (List<Comparable> list1 : Cartesian.cartesianProduct(this.getAllowedValues()))
         {
             Map<IProperty, Comparable> map1 = MapPopulator.<IProperty, Comparable>createMap(this.properties, list1);
-            BlockState.StateImplementation blockstate$stateimplementation = new BlockState.StateImplementation(blockIn, ImmutableMap.copyOf(map1));
+            BlockState.StateImplementation blockstate$stateimplementation = createState(blockIn, ImmutableMap.copyOf(map1), unlistedProperties);
             map.put(map1, blockstate$stateimplementation);
             list.add(blockstate$stateimplementation);
         }
@@ -136,6 +146,13 @@
                 }
             }
 
+            protected StateImplementation(Block blockIn, ImmutableMap<IProperty, Comparable> propertiesIn, ImmutableTable<IProperty, Comparable, IBlockState> propertyValueTable)
+            {
+                this.block = blockIn;
+                this.properties = propertiesIn;
+                this.propertyValueTable = propertyValueTable;
+            }
+
             public <T extends Comparable<T>, V extends T> IBlockState withProperty(IProperty<T> property, V value)
             {
                 if (!this.properties.containsKey(property))
@@ -203,5 +220,10 @@
                 map.put(property, value);
                 return map;
             }
+
+            public ImmutableTable<IProperty, Comparable, IBlockState> getPropertyValueTable()
+            {
+                return propertyValueTable;
+            }
         }
 }
