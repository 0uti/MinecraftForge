--- ../src_base/minecraft/net/minecraft/src/Item.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/Item.java	0000-00-00 00:00:00.000000000 -0000
@@ -5,6 +5,7 @@
 package net.minecraft.src;
 
 import java.io.PrintStream;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
@@ -177,6 +178,9 @@
     private String field_39010_c;
     private String itemName;
 
+    // FORGE: To disable repair recipes.
+    protected boolean canRepair=true;
+
     protected Item(int i)
     {
         maxStackSize = 64;
@@ -231,6 +235,13 @@
         return 1.0F;
     }
 
+    /* FORGE: Metadata-sensitive version of getStrVsBlock
+     */
+    public float getStrVsBlock(ItemStack itemstack, Block block, int md)
+    {
+	    return getStrVsBlock(itemstack,block);
+    }
+
     public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityplayer)
     {
         return itemstack;
@@ -278,6 +289,19 @@
         return maxDamage > 0 && !hasSubtypes;
     }
 
+    /* FORGE: Called by CraftingManager to determine if an item is repairable.
+     */
+    public boolean isRepairable() {
+	    return canRepair && isDamageable();
+    }
+
+    /* FORGE: Call to disable repair recipes.
+     */
+    public Item setNoRepair() {
+	    canRepair=false;
+	    return this;
+    }
+
     public boolean hitEntity(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1)
     {
         return false;
@@ -473,6 +497,28 @@
     {
         return 0;
     }
+    
+    /* FORGE: Called when a new CreativeContainer is opened, populate the list 
+     * with all of the items for this item you want a player in creative mode
+     * to have access to.
+     */
+    public void addCreativeItems(ArrayList itemList)
+    {    	
+    	if (this.shiftedIndex != Item.potion.shiftedIndex)
+    	{
+    		if (this.shiftedIndex == Item.dyePowder.shiftedIndex)
+    		{
+    			for (int x = 0; x < 16; x++)
+    			{
+    				itemList.add(new ItemStack(Item.dyePowder, 1, x));
+    			}
+    		}
+    		else
+    		{
+    			itemList.add(new ItemStack(this, 1));
+    		}
+    	}
+    }
 
     static 
     {
