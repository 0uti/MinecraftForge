--- ../src-base/minecraft/net/minecraft/client/renderer/texturefx/TextureWatchFX.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texturefx/TextureWatchFX.java
@@ -1,15 +1,21 @@
 package net.minecraft.client.renderer.texturefx;
 
+import cpw.mods.fml.client.FMLTextureFX;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+
+import java.awt.Graphics2D;
 import java.awt.image.BufferedImage;
+import java.awt.image.ImageObserver;
 import java.io.IOException;
+import java.util.logging.Level;
+
 import javax.imageio.ImageIO;
 import net.minecraft.client.Minecraft;
 import net.minecraft.item.Item;
 
 @SideOnly(Side.CLIENT)
-public class TextureWatchFX extends TextureFX
+public class TextureWatchFX extends FMLTextureFX
 {
     private Minecraft field_76860_g;
     private int[] field_76863_h = new int[256];
@@ -22,19 +28,39 @@
         super(Item.field_77752_aS.func_77617_a(0));
         this.field_76860_g = p_i3214_1_;
         this.field_76847_f = 1;
+        setup();
+    }
+
+    @Override
+    public void setup()
+    {
+        super.setup();
+        field_76863_h = new int[tileSizeSquare];
+        field_76864_i = new int[tileSizeSquare];
 
         try
         {
-            BufferedImage bufferedimage = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
-            int i = this.field_76850_b % 16 * 16;
-            int j = this.field_76850_b / 16 * 16;
-            bufferedimage.getRGB(i, j, 16, 16, this.field_76863_h, 0, 16);
-            bufferedimage = ImageIO.read(Minecraft.class.getResource("/misc/dial.png"));
-            bufferedimage.getRGB(0, 0, 16, 16, this.field_76864_i, 0, 16);
+            BufferedImage bufferedimage = ImageIO.read(field_76860_g.field_71418_C.func_77292_e().func_77532_a("/gui/items.png"));
+            int i = this.field_76850_b % 16 * tileSizeBase;
+            int j = this.field_76850_b / 16 * tileSizeBase;
+            bufferedimage.getRGB(i, j, tileSizeBase, tileSizeBase, this.field_76863_h, 0, tileSizeBase);
+            bufferedimage = ImageIO.read(field_76860_g.field_71418_C.func_77292_e().func_77532_a("/misc/dial.png"));
+            if (bufferedimage.getWidth() != tileSizeBase)
+            {
+                BufferedImage tmp = new BufferedImage(tileSizeBase, tileSizeBase, 6);
+                Graphics2D gfx = tmp.createGraphics();
+                gfx.drawImage(bufferedimage, 0, 0, tileSizeBase, tileSizeBase, 0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), (ImageObserver)null);
+                gfx.dispose();
+                bufferedimage = tmp;
+            }
+
+            bufferedimage.getRGB(0, 0, tileSizeBase, tileSizeBase, this.field_76864_i, 0, tileSizeBase);
         }
-        catch (IOException ioexception)
+        catch (Exception ioexception)
         {
             ioexception.printStackTrace();
+            log.log(Level.WARNING, String.format("A problem occurred with the watch texture: animation will be disabled"), ioexception);
+            setErrored(true);
         }
     }
 
@@ -81,7 +107,7 @@
         double d2 = Math.sin(this.field_76861_j);
         double d3 = Math.cos(this.field_76861_j);
 
-        for (int i = 0; i < 256; ++i)
+        for (int i = 0; i < tileSizeSquare; ++i)
         {
             int j = this.field_76863_h[i] >> 24 & 255;
             int k = this.field_76863_h[i] >> 16 & 255;
@@ -90,12 +116,12 @@
 
             if (k == i1 && l == 0 && i1 > 0)
             {
-                double d4 = -((double)(i % 16) / 15.0D - 0.5D);
-                double d5 = (double)(i / 16) / 15.0D - 0.5D;
+                double d4 = -((double)(i % tileSizeBase) / tileSizeMask - 0.5D);
+                double d5 = (double)(i / tileSizeBase) / tileSizeMask - 0.5D;
                 int j1 = k;
-                int k1 = (int)((d4 * d3 + d5 * d2 + 0.5D) * 16.0D);
-                int l1 = (int)((d5 * d3 - d4 * d2 + 0.5D) * 16.0D);
-                int i2 = (k1 & 15) + (l1 & 15) * 16;
+                int k1 = (int)((d4 * d3 + d5 * d2 + 0.5D) * tileSizeBase);
+                int l1 = (int)((d5 * d3 - d4 * d2 + 0.5D) * tileSizeBase);
+                int i2 = (k1 & tileSizeMask) + (l1 & tileSizeMask) * tileSizeBase;
                 j = this.field_76864_i[i2] >> 24 & 255;
                 k = (this.field_76864_i[i2] >> 16 & 255) * k / 255;
                 l = (this.field_76864_i[i2] >> 8 & 255) * j1 / 255;
