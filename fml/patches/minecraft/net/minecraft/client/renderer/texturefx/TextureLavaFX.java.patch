--- ../src-base/minecraft/net/minecraft/client/renderer/texturefx/TextureLavaFX.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texturefx/TextureLavaFX.java
@@ -1,12 +1,13 @@
 package net.minecraft.client.renderer.texturefx;
 
+import cpw.mods.fml.client.FMLTextureFX;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import net.minecraft.block.Block;
 import net.minecraft.util.MathHelper;
 
 @SideOnly(Side.CLIENT)
-public class TextureLavaFX extends TextureFX
+public class TextureLavaFX extends FMLTextureFX
 {
     protected float[] field_76876_g = new float[256];
     protected float[] field_76878_h = new float[256];
@@ -16,6 +17,17 @@
     public TextureLavaFX()
     {
         super(Block.field_71944_C.field_72059_bZ);
+        setup();
+    }
+
+    @Override
+    public void setup()
+    {
+        super.setup();
+        field_76876_g = new float[tileSizeSquare];
+        field_76878_h = new float[tileSizeSquare];
+        field_76879_i = new float[tileSizeSquare];
+        field_76877_j = new float[tileSizeSquare];
     }
 
     public void func_76846_a()
@@ -28,9 +40,9 @@
         int i1;
         int j1;
 
-        for (int k1 = 0; k1 < 16; ++k1)
+        for (int k1 = 0; k1 < tileSizeBase; ++k1)
         {
-            for (i = 0; i < 16; ++i)
+            for (i = 0; i < tileSizeBase; ++i)
             {
                 f = 0.0F;
                 int l1 = (int)(MathHelper.func_76126_a((float)i * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
@@ -40,25 +52,25 @@
                 {
                     for (l = i - 1; l <= i + 1; ++l)
                     {
-                        i1 = k + l1 & 15;
-                        j1 = l + j & 15;
-                        f += this.field_76876_g[i1 + j1 * 16];
+                        i1 = k + l1 & tileSizeMask;
+                        j1 = l + j & tileSizeMask;
+                        f += this.field_76876_g[i1 + j1 * tileSizeBase];
                     }
                 }
 
-                this.field_76878_h[k1 + i * 16] = f / 10.0F + (this.field_76879_i[(k1 + 0 & 15) + (i + 0 & 15) * 16] + this.field_76879_i[(k1 + 1 & 15) + (i + 0 & 15) * 16] + this.field_76879_i[(k1 + 1 & 15) + (i + 1 & 15) * 16] + this.field_76879_i[(k1 + 0 & 15) + (i + 1 & 15) * 16]) / 4.0F * 0.8F;
-                this.field_76879_i[k1 + i * 16] += this.field_76877_j[k1 + i * 16] * 0.01F;
+                this.field_76878_h[k1 + i * tileSizeBase] = f / 10.0F + (this.field_76879_i[(k1 + 0 & tileSizeMask) + (i + 0 & tileSizeMask) * tileSizeBase] + this.field_76879_i[(k1 + 1 & tileSizeMask) + (i + 0 & tileSizeMask) * tileSizeBase] + this.field_76879_i[(k1 + 1 & tileSizeMask) + (i + 1 & tileSizeMask) * tileSizeBase] + this.field_76879_i[(k1 + 0 & tileSizeMask) + (i + 1 & tileSizeMask) * tileSizeBase]) / 4.0F * 0.8F;
+                this.field_76879_i[k1 + i * tileSizeBase] += this.field_76877_j[k1 + i * tileSizeBase] * 0.01F;
 
-                if (this.field_76879_i[k1 + i * 16] < 0.0F)
+                if (this.field_76879_i[k1 + i * tileSizeBase] < 0.0F)
                 {
-                    this.field_76879_i[k1 + i * 16] = 0.0F;
+                    this.field_76879_i[k1 + i * tileSizeBase] = 0.0F;
                 }
 
-                this.field_76877_j[k1 + i * 16] -= 0.06F;
+                this.field_76877_j[k1 + i * tileSizeBase] -= 0.06F;
 
                 if (Math.random() < 0.005D)
                 {
-                    this.field_76877_j[k1 + i * 16] = 1.5F;
+                    this.field_76877_j[k1 + i * tileSizeBase] = 1.5F;
                 }
             }
         }
@@ -67,7 +79,7 @@
         this.field_76878_h = this.field_76876_g;
         this.field_76876_g = afloat;
 
-        for (i = 0; i < 256; ++i)
+        for (i = 0; i < tileSizeSquare; ++i)
         {
             f = this.field_76876_g[i] * 2.0F;
 
