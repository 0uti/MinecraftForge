--- ../src-base/minecraft/net/minecraft/client/renderer/texturefx/TexturePortalFX.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texturefx/TexturePortalFX.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.texturefx;
 
+import cpw.mods.fml.client.FMLTextureFX;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.util.Random;
@@ -7,31 +8,39 @@
 import net.minecraft.util.MathHelper;
 
 @SideOnly(Side.CLIENT)
-public class TexturePortalFX extends TextureFX
+public class TexturePortalFX extends FMLTextureFX
 {
     private int field_76853_g = 0;
-    private byte[][] field_76854_h = new byte[32][1024];
+    private byte[][] field_76854_h;
 
     public TexturePortalFX()
     {
         super(Block.field_72015_be.field_72059_bZ);
+        setup();
+    }
+
+    @Override
+    public void setup()
+    {
+        super.setup();
+        field_76854_h = new byte[32][tileSizeSquare << 4];
         Random random = new Random(100L);
 
         for (int i = 0; i < 32; ++i)
         {
-            for (int j = 0; j < 16; ++j)
+            for (int j = 0; j < tileSizeBase; ++j)
             {
-                for (int k = 0; k < 16; ++k)
+                for (int k = 0; k < tileSizeBase; ++k)
                 {
                     float f = 0.0F;
                     int l;
 
                     for (l = 0; l < 2; ++l)
                     {
-                        float f1 = (float)(l * 16) * 0.5F;
-                        float f2 = (float)(l * 16) * 0.5F;
-                        float f3 = ((float)j - f1) / 16.0F * 2.0F;
-                        float f4 = ((float)k - f2) / 16.0F * 2.0F;
+                        float f1 = (float)(l * tileSizeBase) * 0.5F;
+                        float f2 = (float)(l * tileSizeBase) * 0.5F;
+                        float f3 = ((float)j - f1) / (float)tileSizeBase * 2.0F;
+                        float f4 = ((float)k - f2) / (float)tileSizeBase * 2.0F;
 
                         if (f3 < -1.0F)
                         {
@@ -65,7 +74,7 @@
                     int i1 = (int)(f * f * 200.0F + 55.0F);
                     int j1 = (int)(f * f * f * f * 255.0F);
                     int k1 = (int)(f * 100.0F + 155.0F);
-                    int l1 = k * 16 + j;
+                    int l1 = k * tileSizeBase + j;
                     this.field_76854_h[i][l1 * 4 + 0] = (byte)i1;
                     this.field_76854_h[i][l1 * 4 + 1] = (byte)j1;
                     this.field_76854_h[i][l1 * 4 + 2] = (byte)l;
@@ -80,7 +89,7 @@
         ++this.field_76853_g;
         byte[] abyte = this.field_76854_h[this.field_76853_g & 31];
 
-        for (int i = 0; i < 256; ++i)
+        for (int i = 0; i < tileSizeSquare; ++i)
         {
             int j = abyte[i * 4 + 0] & 255;
             int k = abyte[i * 4 + 1] & 255;
