--- ../src-base/minecraft/net/minecraft/client/renderer/texturefx/TextureWaterFlowFX.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texturefx/TextureWaterFlowFX.java
@@ -1,11 +1,12 @@
 package net.minecraft.client.renderer.texturefx;
 
+import cpw.mods.fml.client.FMLTextureFX;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import net.minecraft.block.Block;
 
 @SideOnly(Side.CLIENT)
-public class TextureWaterFlowFX extends TextureFX
+public class TextureWaterFlowFX extends FMLTextureFX
 {
     protected float[] field_76880_g = new float[256];
     protected float[] field_76883_h = new float[256];
@@ -17,6 +18,18 @@
     {
         super(Block.field_71942_A.field_72059_bZ + 1);
         this.field_76849_e = 2;
+        setup();
+    }
+
+    @Override
+    public void setup()
+    {
+        super.setup();
+        field_76880_g = new float[tileSizeSquare];
+        field_76883_h = new float[tileSizeSquare];
+        field_76884_i = new float[tileSizeSquare];
+        field_76881_j = new float[tileSizeSquare];
+        field_76882_k = 0;
     }
 
     public void func_76846_a()
@@ -28,39 +41,39 @@
         int k;
         int l;
 
-        for (i = 0; i < 16; ++i)
+        for (i = 0; i < tileSizeBase; ++i)
         {
-            for (j = 0; j < 16; ++j)
+            for (j = 0; j < tileSizeBase; ++j)
             {
                 f = 0.0F;
 
                 for (int i1 = j - 2; i1 <= j; ++i1)
                 {
-                    k = i & 15;
-                    l = i1 & 15;
-                    f += this.field_76880_g[k + l * 16];
+                    k = i & tileSizeMask;
+                    l = i1 & tileSizeMask;
+                    f += this.field_76880_g[k + l * tileSizeBase];
                 }
 
-                this.field_76883_h[i + j * 16] = f / 3.2F + this.field_76884_i[i + j * 16] * 0.8F;
+                this.field_76883_h[i + j * tileSizeBase] = f / 3.2F + this.field_76884_i[i + j * tileSizeBase] * 0.8F;
             }
         }
 
-        for (i = 0; i < 16; ++i)
+        for (i = 0; i < tileSizeBase; ++i)
         {
-            for (j = 0; j < 16; ++j)
+            for (j = 0; j < tileSizeBase; ++j)
             {
-                this.field_76884_i[i + j * 16] += this.field_76881_j[i + j * 16] * 0.05F;
+                this.field_76884_i[i + j * tileSizeBase] += this.field_76881_j[i + j * tileSizeBase] * 0.05F;
 
-                if (this.field_76884_i[i + j * 16] < 0.0F)
+                if (this.field_76884_i[i + j * tileSizeBase] < 0.0F)
                 {
-                    this.field_76884_i[i + j * 16] = 0.0F;
+                    this.field_76884_i[i + j * tileSizeBase] = 0.0F;
                 }
 
-                this.field_76881_j[i + j * 16] -= 0.3F;
+                this.field_76881_j[i + j * tileSizeBase] -= 0.3F;
 
                 if (Math.random() < 0.2D)
                 {
-                    this.field_76881_j[i + j * 16] = 0.5F;
+                    this.field_76881_j[i + j * tileSizeBase] = 0.5F;
                 }
             }
         }
@@ -69,9 +82,9 @@
         this.field_76883_h = this.field_76880_g;
         this.field_76880_g = afloat;
 
-        for (j = 0; j < 256; ++j)
+        for (j = 0; j < tileSizeSquare; ++j)
         {
-            f = this.field_76880_g[j - this.field_76882_k * 16 & 255];
+            f = this.field_76880_g[j - this.field_76882_k * tileSizeBase & tileSizeSquareMask];
 
             if (f > 1.0F)
             {
